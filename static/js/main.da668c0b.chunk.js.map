{"version":3,"sources":["components/Text.js","components/CircleBackground.js","components/CircleTop.js","components/CircularProgressBar.js","App.js","index.js"],"names":["Text","counter","fontSize","fontWeight","fontColor","x","y","fill","textAnchor","dominantBaseline","CircleBackground","stroke","colorCircle","cx","cy","r","shapeRendering","strokeWidth","GradientLinear","linearGradient","number","id","map","gradient","index","offset","length","stopColor","CircleTop","props","round","colorSlice","dasharray","undefined","transform","strokeLinecap","strokeDasharray","CircularProgressBar","percent","opacity","size","useState","setCounter","counterRef","useRef","useEffect","angle","current","dataset","angel","request","console","log","requestAnimationFrame","cancelAnimationFrame","style","boxShadow","hex","c","parseInt","replace","hex2rgb","width","height","borderRadius","styleObj","ref","viewBox","defaultProps","propsA","propsB","propsC","propsD","App","seconds","setSeconds","interval","setInterval","Math","floor","random","clearInterval","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da668c0b.chunk.js","sourcesContent":["const Text = ({ counter, fontSize, fontWeight, fontColor }) => {\r\n  return (\r\n    <text\r\n      x=\"50%\"\r\n      y=\"50%\"\r\n      fontSize={fontSize}\r\n      fontWeight={fontWeight}\r\n      fill={fontColor}\r\n      textAnchor=\"middle\"\r\n      dominantBaseline=\"central\"\r\n    >\r\n      {counter}%\r\n    </text>\r\n  )\r\n}\r\n\r\nexport default Text;","const CircleBackground = ({ stroke, colorCircle }) => {\r\n  return (\r\n    <circle\r\n      cx=\"50\"\r\n      cy=\"50\"\r\n      r=\"42\"\r\n      shapeRendering=\"geometricPrecision\"\r\n      fill=\"none\"\r\n      stroke={colorCircle}\r\n      strokeWidth={stroke}>\r\n    </circle>\r\n  )\r\n}\r\n\r\nexport default CircleBackground;","const GradientLinear = ({ linearGradient }) => {\r\n  let number = -100;\r\n  return (\r\n    <defs>\r\n      <linearGradient id=\"linear-gradient\">\r\n        {linearGradient.map((gradient, index) => {\r\n          number += 100;\r\n          return <stop key={index} offset={number / (linearGradient.length - 1) + '%'} stopColor={gradient}></stop>\r\n        })}\r\n      </linearGradient>\r\n    </defs>\r\n  );\r\n}\r\n\r\nconst CircleTop = (props) => {\r\n  const { linearGradient, counter, stroke, round, colorSlice } = props;\r\n  const dasharray = counter * 2.64 + ', 20000';\r\n  const gradient = linearGradient !== undefined ? \"url(#linear-gradient)\" : colorSlice\r\n\r\n  return (\r\n    <>\r\n      {linearGradient && <GradientLinear linearGradient={linearGradient} />}\r\n      <circle\r\n        cx=\"50\"\r\n        cy=\"50\"\r\n        r=\"42\"\r\n        shapeRendering=\"geometricPrecision\"\r\n        fill=\"none\"\r\n        transform=\"rotate(-90, 50, 50)\"\r\n        stroke={gradient}\r\n        strokeWidth={stroke}\r\n        strokeLinecap={round ? 'round' : ''}\r\n        strokeDasharray={dasharray}\r\n      >\r\n      </circle>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CircleTop;","import React, { useRef, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Text from './Text';\r\nimport CircleBackground from './CircleBackground';\r\nimport CircleTop from './CircleTop';\r\n\r\nconst hex2rgb = (hex, opacity = 10) => {\r\n  const c = typeof hex === 'string' ? parseInt(hex.replace('#', ''), 16) : hex;\r\n  return `rgba(${c >> 16}, ${(c & 0xff00) >> 8}, ${c & 0xff}, ${opacity / 100})`;\r\n}\r\n\r\nconst CircularProgressBar = props => {\r\n  const {\r\n    percent,\r\n    number,\r\n    stroke,\r\n    colorSlice,\r\n    colorCircle,\r\n    opacity,\r\n    size\r\n  } = props;\r\n\r\n  const [counter, setCounter] = useState(0)\r\n  const counterRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    let angle = counterRef.current?.dataset?.angel;\r\n\r\n    if (percent > 100 || percent <= 0 || angle === percent) return;\r\n\r\n    console.log('test', percent, angle, counter);\r\n\r\n    let request\r\n    const performAnimation = () => {\r\n      if (angle > percent) {\r\n        setCounter(x => x - 1)\r\n      } else if (angle < percent) {\r\n        setCounter(x => x + 1)\r\n      }\r\n    }\r\n\r\n    request = requestAnimationFrame(performAnimation)\r\n\r\n    return () => cancelAnimationFrame(request)\r\n\r\n  }, [counter, percent])\r\n\r\n  const styleObj = (colorCircle) => {\r\n    const boxShadow = colorCircle === undefined\r\n      ? `inset 0px 0px ${stroke}px ${stroke}px ${hex2rgb(colorSlice, opacity)}`\r\n      : '';\r\n    return {\r\n      width: size,\r\n      height: size,\r\n      borderRadius: '50%',\r\n      boxShadow\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={styleObj(colorCircle)}>\r\n      <svg ref={counterRef} width={size} height={size} viewBox=\"0 0 100 100\" data-angel={counter}>\r\n        {number && <Text counter={counter} {...props} />}\r\n        <CircleBackground counter={counter} {...props} />\r\n        <CircleTop counter={counter} {...props} />\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nCircularProgressBar.propTypes = {\r\n  percent: PropTypes.number.isRequired,\r\n  colorSlice: PropTypes.string,\r\n  colorCircle: PropTypes.string,\r\n  stroke: PropTypes.number,\r\n  round: PropTypes.bool,\r\n  opacity: PropTypes.number,\r\n  number: PropTypes.bool,\r\n  size: PropTypes.number,\r\n  fontSize: PropTypes.string,\r\n  fontWeight: PropTypes.number,\r\n  fontColor: PropTypes.string,\r\n  linearGradient: PropTypes.array\r\n};\r\n\r\nCircularProgressBar.defaultProps = {\r\n  colorSlice: '#00a1ff',\r\n  round: false,\r\n  number: true,\r\n  stroke: 10,\r\n  opacity: 10,\r\n  size: 200,\r\n  fontSize: '1.6rem',\r\n  fontColor: '#365b74',\r\n  fontWeight: 400,\r\n};\r\n\r\nexport default CircularProgressBar;","import { useState, useEffect } from 'react';\r\nimport CircularProgressBar from './components/CircularProgressBar';\r\n\r\nconst propsA = {\r\n  percent: 70,\r\n  colorSlice: \"#E91E63\",\r\n}\r\n\r\nconst propsB = {\r\n  linearGradient: [\"yellow\", \"#ff0000\"],\r\n  round: true,\r\n  percent: 66,\r\n  colorSlice: \"#4CAF50\",\r\n  colorCircle: \"#e6e6e6\"\r\n}\r\n\r\nconst propsC = {\r\n  percent: 55,\r\n  colorSlice: \"#CDDC39\",\r\n  colorCircle: \"#f1f1f1\",\r\n}\r\n\r\nconst propsD = {\r\n  percent: 60,\r\n  colorSlice: \"#000\",\r\n  colorCircle: \"#e6e6e6\",\r\n  number: false\r\n}\r\n\r\nfunction App() {\r\n  const [seconds, setSeconds] = useState(propsA);\r\n\r\n  useEffect(() => {\r\n\r\n    const interval = setInterval(() => {\r\n      setSeconds({\r\n        percent: Math.floor((Math.random() * 100) + 1),\r\n        colorSlice: \"#E91E63\"\r\n      });\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval);\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <CircularProgressBar {...seconds} />\r\n      <CircularProgressBar {...propsB} />\r\n      <CircularProgressBar {...propsC} />\r\n      <CircularProgressBar {...propsD} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}