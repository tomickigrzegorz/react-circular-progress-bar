{"version":3,"sources":["components/CircleTop.js","components/CircleBackground.js","components/CircleText.js","components/CircularProgressBar.js","App.js","index.js"],"names":["GradientLinear","index","linearGradient","number","id","map","gradient","offset","length","stopColor","CircleTop","memo","counter","stroke","round","colorSlice","undefined","cx","cy","r","shapeRendering","fill","transform","strokeWidth","strokeLinecap","strokeDasharray","CircleBackground","colorCircle","CircleText","fontSize","fontWeight","fontColor","x","y","textAnchor","dominantBaseline","styleObj","props","opacity","size","width","height","borderRadius","boxShadow","hex","c","parseInt","replace","hex2rgb","CircleWrapper","viewBox","CircularProgressBar","percent","useState","setCounter","ref","useRef","show","isIntersecting","setIntersecting","useEffect","ovserver","current","IntersectionObserver","entries","forEach","entry","intersectionRatio","unobserve","root","rootMargin","threshold","observe","disconnect","useOnScreen","angle","dataset","angel","request","requestAnimationFrame","cancelAnimationFrame","style","defaultProps","initial","defaults","lineargradient","simple","withoutNumber","App","first","setFirst","interval","setInterval","Math","floor","random","clearInterval","className","newObject","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86f25019.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\n\r\nconst GradientLinear = ({ index, linearGradient }) => {\r\n  let number = -100\r\n  let id = `linear-gradient-${index}`\r\n  return (\r\n    <defs>\r\n      <linearGradient id={id}>\r\n        {linearGradient.map((gradient, index) => {\r\n          number += 100;\r\n          return <stop key={index} offset={number / (linearGradient.length - 1) + '%'} stopColor={gradient}></stop>\r\n        })}\r\n      </linearGradient>\r\n    </defs>\r\n  );\r\n}\r\n\r\nconst CircleTop = memo(({ id, linearGradient, counter, stroke, round, colorSlice }) => {\r\n  const gradient = linearGradient !== undefined ? `url(#linear-gradient-${id})` : colorSlice\r\n\r\n  return (\r\n    <>\r\n      {linearGradient && <GradientLinear index={id} linearGradient={linearGradient} />}\r\n      <circle\r\n        cx=\"50\"\r\n        cy=\"50\"\r\n        r=\"42\"\r\n        shapeRendering=\"geometricPrecision\"\r\n        fill=\"none\"\r\n        transform=\"rotate(-90, 50, 50)\"\r\n        stroke={gradient}\r\n        strokeWidth={stroke}\r\n        strokeLinecap={round ? 'round' : ''}\r\n        strokeDasharray={counter * 2.64 + ', 20000'}\r\n      >\r\n      </circle>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default CircleTop;","import React, { memo } from 'react';\r\n\r\nconst CircleBackground = memo(({ stroke, colorCircle }) => {\r\n  return (\r\n    <circle\r\n      cx=\"50\"\r\n      cy=\"50\"\r\n      r=\"42\"\r\n      shapeRendering=\"geometricPrecision\"\r\n      fill=\"none\"\r\n      stroke={colorCircle}\r\n      strokeWidth={stroke}>\r\n    </circle>\r\n  )\r\n})\r\n\r\nexport default CircleBackground;","import React, { memo } from 'react';\r\n\r\nconst CircleText = memo(({ number, counter, fontSize, fontWeight, fontColor }) => {\r\n  return number\r\n    ? (\r\n      <text\r\n        x=\"50%\"\r\n        y=\"50%\"\r\n        fontSize={fontSize}\r\n        fontWeight={fontWeight}\r\n        fill={fontColor}\r\n        textAnchor=\"middle\"\r\n        dominantBaseline=\"central\"\r\n      >\r\n        {counter}%\r\n      </text>\r\n    )\r\n    : null;\r\n})\r\n\r\nexport default CircleText;","import React, { memo, useRef, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircleTop from './CircleTop';\r\nimport CircleBackground from './CircleBackground';\r\nimport CircleText from './CircleText';\r\n\r\nconst hex2rgb = (hex, opacity = 10) => {\r\n  const c = typeof hex === 'string' ? parseInt(hex.replace('#', ''), 16) : hex;\r\n  return `rgba(${c >> 16}, ${(c & 0xff00) >> 8}, ${c & 0xff}, ${opacity / 100})`;\r\n}\r\n\r\nconst styleObj = (props, colorCircle) => {\r\n  const { stroke, colorSlice, opacity, size } = props\r\n\r\n  const boxShadow = colorCircle === undefined\r\n    ? `inset 0px 0px ${stroke}px ${stroke}px ${hex2rgb(colorSlice, opacity)}`\r\n    : '';\r\n  return {\r\n    width: size,\r\n    height: size,\r\n    borderRadius: '50%',\r\n    boxShadow\r\n  }\r\n}\r\n\r\nconst useOnScreen = ref => {\r\n  const [isIntersecting, setIntersecting] = useState(false)\r\n\r\n  useEffect(() => {\r\n\r\n    const config = {\r\n      root: null,\r\n      rootMargin: '0px',\r\n      threshold: 1.0,\r\n    }\r\n\r\n    let ovserver;\r\n    if (ref.current) {\r\n      ovserver = new IntersectionObserver(\r\n        entries => {\r\n          entries.forEach(entry => {\r\n            if (entry.isIntersecting && entry.intersectionRatio >= 0.1) {\r\n              setIntersecting(entry.isIntersecting)\r\n              ovserver.unobserve(ref.current)\r\n            }\r\n          });\r\n        }, config\r\n      )\r\n      ovserver.observe(ref.current)\r\n    }\r\n\r\n    return () => {\r\n      ovserver.disconnect()\r\n    };\r\n  }, [ref])\r\n\r\n  return isIntersecting\r\n}\r\n\r\nconst CircleWrapper = props => {\r\n  const { id, size } = props;\r\n  return (\r\n    <svg width={size} height={size} data-index={id} viewBox=\"0 0 100 100\">\r\n      <CircleText {...props} />\r\n      <CircleBackground {...props} />\r\n      <CircleTop {...props} />\r\n    </svg>\r\n  )\r\n}\r\n\r\nconst CircularProgressBar = memo(props => {\r\n  const {\r\n    percent,\r\n    colorCircle,\r\n  } = props;\r\n\r\n  const [counter, setCounter] = useState(0)\r\n  const ref = useRef()\r\n  const show = useOnScreen(ref)\r\n\r\n  useEffect(() => {\r\n    if (!show) return;\r\n\r\n    let angle = ref.current?.dataset?.angel;\r\n\r\n    if (percent > 100 || percent <= 0 || angle === percent) return;\r\n\r\n    let request\r\n    const performAnimation = () => {\r\n      if (angle > percent) {\r\n        setCounter(x => x - 1)\r\n      } else if (angle < percent) {\r\n        setCounter(x => x + 1)\r\n      }\r\n    }\r\n\r\n    request = requestAnimationFrame(performAnimation)\r\n\r\n    return () => cancelAnimationFrame(request)\r\n  }, [counter, show, percent])\r\n\r\n  return (\r\n    <div ref={ref} style={styleObj(props, colorCircle)} data-angel={counter}>\r\n      <CircleWrapper counter={counter} {...props} />\r\n    </div>\r\n  );\r\n})\r\n\r\nCircularProgressBar.propTypes = {\r\n  percent: PropTypes.number.isRequired,\r\n  colorSlice: PropTypes.string,\r\n  colorCircle: PropTypes.string,\r\n  initial: PropTypes.bool,\r\n  stroke: PropTypes.number,\r\n  round: PropTypes.bool,\r\n  opacity: PropTypes.number,\r\n  number: PropTypes.bool,\r\n  size: PropTypes.number,\r\n  index: PropTypes.number,\r\n  fontSize: PropTypes.string,\r\n  fontWeight: PropTypes.number,\r\n  fontColor: PropTypes.string,\r\n  linearGradient: PropTypes.array\r\n};\r\n\r\nCircularProgressBar.defaultProps = {\r\n  colorSlice: '#00a1ff',\r\n  round: false,\r\n  initial: true,\r\n  number: true,\r\n  stroke: 10,\r\n  opacity: 10,\r\n  size: 200,\r\n  fontSize: '1.6rem',\r\n  fontColor: '#365b74',\r\n  fontWeight: 400,\r\n};\r\n\r\nexport default CircularProgressBar;","import { useState, useEffect } from 'react';\r\nimport CircularProgressBar from './components/CircularProgressBar';\r\n\r\nconst defaults = [\r\n  {\r\n    id: 0,\r\n    percent: 50,\r\n    colorSlice: \"#E91E63\",\r\n  },\r\n  {\r\n    id: 1,\r\n    percent: 60,\r\n    colorSlice: \"#ffc107\",\r\n  },\r\n  {\r\n    id: 2,\r\n    percent: 70,\r\n    colorSlice: \"#00bcd4\",\r\n  }\r\n]\r\n\r\nconst lineargradient = [\r\n  {\r\n    id: 3,\r\n    linearGradient: [\"yellow\", \"#ff0000\"],\r\n    round: true,\r\n    percent: 70,\r\n    colorSlice: \"#4CAF50\",\r\n    colorCircle: \"#e6e6e6\"\r\n  },\r\n  {\r\n    id: 4,\r\n    linearGradient: [\"#ff0000\", \"#9c27b0\"],\r\n    round: true,\r\n    percent: 80,\r\n    colorSlice: \"#4CAF50\",\r\n    colorCircle: \"#e6e6e6\"\r\n  },\r\n  {\r\n    id: 5,\r\n    linearGradient: [\"#ff0000\", \"yellow\"],\r\n    round: true,\r\n    percent: 90,\r\n    colorSlice: \"#4CAF50\",\r\n    colorCircle: \"#e6e6e6\"\r\n  }\r\n]\r\n\r\nconst simple = [\r\n  {\r\n    id: 6,\r\n    percent: 55,\r\n    colorSlice: \"#CDDC39\",\r\n    colorCircle: \"#f1f1f1\",\r\n    fontWeight: 100\r\n  },\r\n  {\r\n    id: 7,\r\n    percent: 75,\r\n    colorSlice: \"#ffc107\",\r\n    colorCircle: \"#e6e6e6\",\r\n    fontWeight: 100\r\n  },\r\n  {\r\n    id: 8,\r\n    percent: 85,\r\n    colorSlice: \"#00bcd4\",\r\n    colorCircle: \"#e6e6e6\",\r\n    fontWeight: 100\r\n  }\r\n]\r\n\r\nconst withoutNumber = [\r\n  {\r\n    id: 9,\r\n    percent: 60,\r\n    colorSlice: \"#000\",\r\n    colorCircle: \"#e6e6e6\",\r\n    number: false\r\n  },\r\n  {\r\n    id: 10,\r\n    percent: 70,\r\n    colorSlice: \"#ffc107\",\r\n    colorCircle: \"#e6e6e6\",\r\n    number: false\r\n  },\r\n  {\r\n    id: 11,\r\n    percent: 80,\r\n    colorSlice: \"#00bcd4\",\r\n    colorCircle: \"#e6e6e6\",\r\n    number: false\r\n  }\r\n]\r\n\r\nfunction App() {\r\n  const [first, setFirst] = useState(defaults[0]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setFirst({\r\n        ...defaults[0],\r\n        id: 0,\r\n        percent: Math.floor((Math.random() * 100) + 1),\r\n      });\r\n    }, 3000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <section>\r\n        {defaults.map((props, index) => {\r\n          const newObject = index === first.id\r\n            ? { ...props, ...first }\r\n            : props\r\n          return <CircularProgressBar key={index} {...newObject} />\r\n        })}\r\n      </section>\r\n      <section>\r\n        {lineargradient.map((props, index) => {\r\n          return <CircularProgressBar key={index} {...props} />\r\n        })}\r\n      </section>\r\n      <section>\r\n        {simple.map((props, index) => {\r\n          return <CircularProgressBar key={index} {...props} />\r\n        })}\r\n      </section>\r\n      <section>\r\n        {withoutNumber.map((props, index) => {\r\n          return <CircularProgressBar key={index} {...props} />\r\n        })}\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}